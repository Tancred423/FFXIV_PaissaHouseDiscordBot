name: Deploy Discord Bot

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v2.5.3

      - name: Check formatting
        run: deno fmt --check

      - name: Run linter
        run: deno lint

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          build-args: |
            GIT_COMMIT_HASH=${{ github.sha }}
          tags: |
            ghcr.io/${{ vars.USERNAME_LOWERCASE }}/paissa-house-discord-bot:latest
            ghcr.io/${{ vars.USERNAME_LOWERCASE }}/paissa-house-discord-bot:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/${{ vars.USERNAME_LOWERCASE }}/paissa-house-discord-bot:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ vars.USERNAME_LOWERCASE }}/paissa-house-discord-bot:buildcache,mode=max

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd ~/paissa-bot

            echo "=== Pre-deployment diagnostics ==="
            echo "Checking for existing volume..."
            if docker volume inspect paissa-bot-data >/dev/null 2>&1; then
              echo "✓ Volume 'paissa-bot-data' exists"
              echo "Volume contents:"
              docker run --rm -v paissa-bot-data:/data:ro alpine ls -lah /data/ || echo "Volume is empty or error listing"
            else
              echo "⚠ Volume 'paissa-bot-data' does not exist - will be created"
            fi

            echo ""
            echo "=== Backing up database ==="
            mkdir -p data_backup
            if docker volume inspect paissa-bot-data >/dev/null 2>&1; then
              BACKUP_FILE="paissa_bot.db.$(date +%Y%m%d_%H%M%S)"
              if docker run --rm -v paissa-bot-data:/data:ro -v $(pwd)/data_backup:/backup alpine sh -c "[ -f /data/paissa_bot.db ] && cp /data/paissa_bot.db /backup/$BACKUP_FILE && echo 'Database backed up to $BACKUP_FILE' || echo 'No database file to backup'"; then
                echo "✓ Backup completed"
              fi
            fi

            echo ""
            echo "=== Stopping containers ==="
            docker-compose down
            echo "✓ Containers stopped (volumes preserved)"

            echo ""
            echo "=== Removing ALL old bot images to ensure clean state ==="
            docker images | grep paissa-house-discord-bot | awk '{print $3}' | xargs -r docker rmi -f 2>/dev/null || echo "No old images to remove"
            docker image prune -f

            echo ""
            echo "=== Pulling latest images ==="
            docker-compose pull

            echo ""
            echo "=== Verifying image has no baked-in data ==="
            docker run --rm ghcr.io/${{ vars.USERNAME_LOWERCASE }}/paissa-house-discord-bot:latest sh -c "ls -lah /app/data 2>/dev/null || echo '/app/data not in image (OK)'"
            docker run --rm ghcr.io/${{ vars.USERNAME_LOWERCASE }}/paissa-house-discord-bot:latest find /app -name "*.db" 2>/dev/null | head -5 || echo "✓ No .db files in image"

            echo ""
            echo "=== Verifying volume before start ==="
            if docker volume inspect paissa-bot-data >/dev/null 2>&1; then
              echo "✓ Volume still exists after image pull"
              docker run --rm -v paissa-bot-data:/data:ro alpine ls -lah /data/ || echo "Volume is empty"
            fi

            echo ""
            echo "=== Starting containers ==="
            DEPLOYMENT_HASH=${{ github.sha }} docker-compose up -d

            echo ""
            echo "=== Post-deployment verification ==="
            sleep 3
            docker-compose ps
            echo ""
            echo "Volume info:"
            docker volume inspect paissa-bot-data
            echo ""
            echo "✓ Deployment complete"
