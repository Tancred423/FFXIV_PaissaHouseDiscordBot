name: Deploy Discord Bot

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v2.5.3

      - name: Check formatting
        run: deno fmt --check

      - name: Run linter
        run: deno lint

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          build-args: |
            GIT_COMMIT_HASH=${{ github.sha }}
          tags: |
            ghcr.io/${{ vars.USERNAME_LOWERCASE }}/paissa-house-discord-bot:latest
            ghcr.io/${{ vars.USERNAME_LOWERCASE }}/paissa-house-discord-bot:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/${{ vars.USERNAME_LOWERCASE }}/paissa-house-discord-bot:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ vars.USERNAME_LOWERCASE }}/paissa-house-discord-bot:buildcache,mode=max

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd ~/paissa-bot

            echo "Backing up database from Docker volume..."
            mkdir -p data_backup

            if docker volume inspect paissa-bot_paissa-bot-data >/dev/null 2>&1; then
              docker run --rm \
                -v paissa-bot_paissa-bot-data:/data:ro \
                -v $(pwd)/data_backup:/backup \
                alpine sh -c "if [ -f /data/paissa_bot.db ]; then cp /data/paissa_bot.db /backup/paissa_bot.db.$(date +%Y%m%d_%H%M%S) && echo 'Database backup created'; else echo 'No database file found'; fi"
            else
              echo "Volume does not exist yet (first deployment)"
            fi

            docker-compose down

            docker image prune -f --filter "label=org.opencontainers.image.source=https://github.com/${{ vars.USERNAME_LOWERCASE }}/FFXIV_PaissaHouseDiscordBot"

            docker-compose pull

            DEPLOYMENT_HASH=${{ github.sha }} docker-compose up -d

            echo "Deployment complete. Database persists in Docker volume 'paissa-bot_paissa-bot-data'"
