name: Deploy Discord Bot

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v2.5.3

      - name: Check formatting
        run: deno fmt --check

      - name: Run linter
        run: deno lint

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          build-args: |
            GIT_COMMIT_HASH=${{ github.sha }}
          tags: |
            ghcr.io/${{ vars.USERNAME_LOWERCASE }}/paissa-house-discord-bot:latest
            ghcr.io/${{ vars.USERNAME_LOWERCASE }}/paissa-house-discord-bot:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/${{ vars.USERNAME_LOWERCASE }}/paissa-house-discord-bot:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ vars.USERNAME_LOWERCASE }}/paissa-house-discord-bot:buildcache,mode=max

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd ~/paissa-bot

            # Check if volume exists and display info
            echo "Checking Docker volume status:"
            docker volume ls | grep paissa_data || echo "Volume doesn't exist yet"

            # Create a backup container to backup the database if the volume exists
            if docker volume ls | grep -q paissa_data; then
              echo "Creating backup of database from volume..."
              # Create a temporary container to access the volume and backup the database
              docker run --rm -v paissa_data:/data -v $(pwd):/backup alpine sh -c '
                if [ -f /data/paissa_bot.db ]; then
                  cp /data/paissa_bot.db /backup/paissa_bot.db.bak.$(date +%Y%m%d%H%M%S)
                  echo "Database backup created in host directory"
                else
                  echo "No database file found in volume"
                fi
              '
            else
              echo "No existing volume found, skipping backup"
            fi

            # Stop and remove only the bot's containers
            docker-compose down

            # Clean up any related dangling images without affecting other services
            docker image prune -f --filter "label=org.opencontainers.image.source=https://github.com/${{ vars.USERNAME_LOWERCASE }}/FFXIV_PaissaHouseDiscordBot"

            # Pull the latest images
            docker-compose pull

            # Register application commands (production mode for global commands)
            DEPLOYMENT_HASH=${{ github.sha }} docker-compose run -e ENVIRONMENT=production register-commands

            # Start the containers with deployment hash for transparency
            DEPLOYMENT_HASH=${{ github.sha }} docker-compose up -d bot

            # Show container info and check volumes
            echo "Container info:"
            docker inspect paissa-house-bot | grep -A 10 "Mounts"

            # Wait a bit for container to start up
            sleep 5

            # Check volume contents
            echo "Volume contents after deployment:"
            docker run --rm -v paissa_data:/data alpine ls -la /data

            # Show logs to check for database errors
            echo "Container logs (database related):"
            docker logs paissa-house-bot | grep -i "database\|db\|data dir\|system"

            # Verify database file exists in volume
            echo "Checking if database exists in volume:"
            docker run --rm -v paissa_data:/data alpine sh -c '
              if [ -f /data/paissa_bot.db ]; then
                echo "Database file exists in volume"
                ls -la /data/paissa_bot.db
              else
                echo "WARNING: Database file not found in volume"
              fi
            '
